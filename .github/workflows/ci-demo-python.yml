name: Python CI Demo

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python-version: 3.10
          - python-version: 3.11
          - python-version: 3.12
          - python-version: 3.13
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Cache pip dependencies
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ matrix.python-version }}

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run tests
      - name: Run tests
        run: |
          echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV
          pytest --maxfail=1 --disable-warnings -q

      # Run linter
      - name: Run linter (flake8)
        run: |
          python -m pip install flake8
          flake8 src tests || true

  publish-pypi:
    needs: build-test-lint
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Build and publish to PyPI
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          if [ -z "$TWINE_PASSWORD" ]; then
            echo "No PYPI token found, skipping upload"
            exit 0
          fi
          python -m pip install --upgrade pip build twine
          python -m build
          python -m twine upload dist/*
